/* 
 * std-img -- Standard IMG Loader Plugin for San Andreas Mod Loader
 * Copyright (C) 2013  LINK/2012 <dma_2012@hotmail.com>
 * Licensed under GNU GPL v3, see LICENSE at top level directory.
 * 
 *  std-img hooks
 * 
 */

/*
 *  TODO
 *    ** I saw IMGs can handle .DAT files, what is that? Should we make a hook to prevent duplicates?
 *    ** Needs testing on RRR and SCM replacement to see if it is working well
 */

#include "Injector.h"
#include <cstdio>

extern void OpenMainCacheImg();

extern "C"
{
    
typedef int CExternalScripts;

void HOOK_OpenMainCacheImg();
void HOOK_AllocateOrFindExternalScript();
int HOOK_AllocateOrFindPath(const char*);

int (*__openImgFile)(const char* filepath, char notPlayerFile) = memory_pointer_a(0x407610);    /* ho */

void* imgArray;
static int (__cdecl *addPath)(const char* name);
static int (__fastcall *CExternalScripts__Allocate)(CExternalScripts* self, int dummy, const char* name);
static int (__fastcall *CExternalScripts__FindByName)(CExternalScripts* self, int dummy, const char* name);
static int* paths;
static int* pathCount;

/*
 *  HOOK_AllocateOrCreateScript
 *      By default the game always create a script, meaning there must be only a single file of scms
 *      Let's remove this, and do the way other file types do...
 *      search for file, found? return it : allocate;
 */
/*
 *  AllocateOrFindExternalScript
 *      Tries to find a external script, if not found, alloc it
 */
int AllocateOrFindExternalScript(CExternalScripts* obj, const char* name)
{
   int result = CExternalScripts__FindByName(obj, 0, name);
   if(result == -1) result = CExternalScripts__Allocate(obj, 0, name);
   return result;
}

/*
 *  getPath
 *      Gets a R3 path number from name, but only if it exists
 */
static int getPath(const char* r3name)
{
    int r3number = 850;
    if(sscanf(r3name, "carrec%d", &r3number) || sscanf(r3name, "CARREC%d", &r3number))
    {
        for(int i = 0; i < *pathCount; ++i)
        {
            if(paths[i * 4] == r3number)
                return r3number;
        }
    }
    return -1;
}

/*
 *  HOOK_AllocateOrFindPath
 *      This hook is placed because if the user duplicates a R3 path at user img,
 *      we won't alloc the path again, just get the one already defined.
 *      We doing this only in R3 paths (and SCM) because all this behaviour is already present
 *      in the game img loader for all extensions but SCM and RRR.
 *      Here we are fixing RRR.
 */
int HOOK_AllocateOrFindPath(const char* name)
{
   int result = getPath(name);
   if(result == -1) result = addPath(name);
   return result;
}



/*
 *  HOOK_OpenMainCacheImg 
 *      Opens the main cache img file, hooked from before opening gta3 and gta_int
 *      This is the so called 'user img'
 */
void HOOK_OpenMainCacheImg();
void CALL_OpenMainCacheImg()
{
    OpenMainCacheImg();
}

} /* extern "C" */




/*
 *  Apply hooks into the game code
 */
void ApplyPatches()
{
    /* Read some pointers */
    imgArray = ReadMemory<void*>(0x4083E8 + 1, true);
    paths = ReadMemory<int*>(0x45A001 + 1, true);
    pathCount = ReadMemory<int*>(0x459FF0 + 2, true);
    CExternalScripts__FindByName = memory_pointer_a(0x4706F0);

    /* After clearing up the imgArray, load our cache img, before gta3 and gta_int, so we have first priority */
    MakeCALL(0x4083E8, (void*) &HOOK_OpenMainCacheImg);

    /* Replace calls to find/get entity index from img file name */
    addPath =
        memory_pointer_a(MakeCALL(0x5B63E8, (void*)(&HOOK_AllocateOrFindPath)).p);
    
    CExternalScripts__Allocate =
        memory_pointer_a(MakeCALL(0x5B6419, (void*)(&HOOK_AllocateOrFindExternalScript)).p);
    
    // Temporary
   // MakeNOP(0x15663F3, 2);
   // MakeNOP(0x15663F9, 2);
}

