------------------------- Creating your own loader-plugin for modloader

    This modloader is fully plugin-based, each plugin handle a kind of file.
    A good way to contribute to the project, is creating a plugin, forked from a existing plugin or not.
    
    An good observation is that the loader is under GPLv3 but you don't need to make your plugin be GPL too,
    all header files are on the plubic-domain and you won't link to the modloader binary, so no GPL infection!
    
    If I won't link to the binary, how I will communicate with the loader?
    Well... if you can't go to the loader, the loader goes to you...
    
    First, let's understand the plugin interface, the interface is event-driven
    and there's the C and the C++ interface, the C++ interface is a wrapper (and good abstraction)
    of the C interface.
 
    I'll explain only the C++ interface (and some of the C interface), the C interface can be
    easilly understandable either reading it's header file or after understanding the C++ interface
    

---------> The C++ interface

    To create your plugin, you must create a object that identifies your plugin, that's right, a class.
    That class must derive from the abstract class CPlugin from <modloader.hpp> at include directory.
    That's the interface you must implement.
    
    But before, some notes:
        [*] Please don't implement DllMain on your plugins.
        [*] Please take a look at the ModLoaderFile structure at modloader.hpp,
            it is a typedef to a C struct, take a look at that C struct. It's well commented, so no problem.
    
    So, you must implement the following methods on your derived class:

        const char* GetName();
            You should return a static C string naming your plugin,
            that will be used to identify your plugin on Log files
        
        const char* GetAuthor()
            You should return a static C string identifying the plugin author.
            However, a null pointer can be returned to not log any author.
        
        const char* GetVersion()
            You should return a static C string with the plugin version
            
        [optional] bool OnStartup()
            This is called when your plugin gets started up.
            Return true for success and false for failure.
            If you return failure, your plugin will be unloaded immediately.
        
        [optional] bool OnShutdown()
            This is called when your plugin gets shutdown.
            Return true for success and false for failure.
            
        bool CheckFile(const ModLoaderFile& file)
            Checks if the file should be handled by this plugin.
            Return true for yes and false for no.
            Please don't process anything here and don't assume files you return yes will reach the next stage.
            
        bool ProcessFile(const ModLoaderFile& file)
            Processes a file you returned yes on CheckFile
            Return true if the file has been processed successfully or false otherwise.
        
        bool PosProcess()
            This is called when all files from all mods have been processed.
            Return true for success and false for failure.
            Here is probably where you will install hooks on the game.
        
        const char** GetExtensionTable()
            This is called very early (after OnStartup or something) and you should return
            a static array of C strings with the extensions your plugin will handle.
            That does not mean your plugin will only receive files with those extensions,
            this table will be used for optimization purposes.
            You can return a null pointer for no extension.
        

---------> Exporting your derived object
        
        So you have the derived object, how can you export it, so modloader can see it?
        
        First, you must create singleton of your derived class that will be alive for the
        entire lifetime of your plugin-library, that's a global object from your class.
        
        Then you must translate your C++ object to the loader C object,
        the modloader can only acquiere and understand the C object (for ABI standalization reasons).
        
        Then optionally you can define a priority for your plugin,
        by default it's 50, the priority range from 0 to 100, where 1 is the lowest,
        100 the highest priority, and 0 is "don't startup the plugin"
        
        And finally, you should export the function GetPluginData,
        that should fill a modloader C object with the necessary data.
        
        MAN, WHAT WAS THAT? TOO HARD, I'LL FORGET THAT!!
        Hey, calm down, it's simpler than you'd think, there's a function that does all this for you,
        here's a exporting example:
        
            extern "C" __declspec(dllexport) void GetPluginData(modloader_plugin_t* data)
            {
                modloader::RegisterPluginData(plugin, data);
            }
        
        Yeah, that simple, RegisterPluginData translates your plugin object (derived from CPlugin)
        to a C object that modloader will understand.
        
        The GetPluginData is the first thing ever called on your plugin,
        however you shouldn't perform any initialization here, instead use OnStartup event.
        
---------> The CPlugin fields

        Beyond abstract methods, the CPlugin object you derive contains some important fields.
        They were of course taken from the C object to help you out.
        
        Those fields are:
        
            modloader_plugin_data* data;
                This is the C object your C++ object.
                You should not mind about this field, everything is already wrapped on your C++ object.

            modloader_data* modloader;
                This is the C interface with some things the modloader core gives you on GetPluginData.
                For example, it contains where the modloader cache path is, where the gamepath is...
                For more information, take a look at modloader_data structure in modloader.h
                
            modloader_fLog   Log;
                This is a function that modloader gave you for logging purposes.
                It's a variadic function, it's prototype is:
                    void Log(const char* LogFormatMessage, ...);
                
                It's prototype is similar to "printf" function, so no worries, right?
            
            modloader_fError Error;
                This is a function that modloader gaves you for error message boxes purposes.
                You may not ever use it, but it's there.
                It's prototype is similar to the Log function.
                

---------> Utility headers

        Beyond API headers (<modloader.h> and <modloader.hpp>) there's utility headers on the include directory.
        Those utility headers are there to help you, so take a look at them, you might use stuff there :)


